service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs20.x
  apiGateway:
    apiKeys:
      - crud-serverless-users-api-key
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "dynamodb:*"
          Resource: arn:aws:dynamodb:us-east-1:891377289883:table/Users
        - Effect: Allow
          Action: "s3:*"
          Resource: arn:aws:s3:::course-platzi/*

  environment:
    BUCKET_NAME: course-platzi
    SECRET_EGG: ${ssm:/SECRET_EGG}

# plugins:
#   - serverless-offline
#   - serverless-dynamodb
#   - serverless-s3-local

# plugins:
# - serverless-cloudformation-sub-variables

plugins:
  - serverless-apigateway-service-proxy
  - serverless-lift
functions:
  custom-authorizer:
    handler: authorizer/handler.authorizer
    package:
      patterns:
        - "authorizer/handler.js"

  get-user:
    handler: getUsers/handler.getUsers
    package:
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          private: true
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true

  get-users:
    handler: getUsers/handler.users
    package:
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          path: users
          method: GET

  create-user:
    handler: createUsers/handler.createUser
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: users
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15

          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-user:
    handler: updateUsers/handler.updateUsers
    package:
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: PUT
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}

  delete-users:
    handler: deleteUsers/handler.deleteUsers
    package:
      patterns:
        - "deleteUsers/handler.py"
    runtime: python3.8
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  signedUrl:
    handler: uploadFile/handler.uploadFile
    package:
      patterns:
        - "uploadFile/handler.js"
        - "lib/uploadS3.js"
        # - "uploadFile/Search.png"
    events:
      - http:
          path: signedUrl
          method: POST
          request:
            parameters:
              querystrings:
                fileName: true
  thumbGenerator:
    handler: thumbnail/handler.handler
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: course-platzi
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/

package:
  individually: true
  patterns:
    - "!*/**"
    - "!nodejs.zip"

custom:
  serverless-dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  apiGatewayServiceProxies:
    - sqs:
        path: /likesqs
        method: post
        queueName: likequeue
        cors: true
        response:
          template:
            # `success` is used when the integration response is 200
            success: |-
              { "message": "accepted" }
            # `clientError` is used when the integration response is 400
            clientError: |-
              { "message": "there is an error in your request" }
            # `serverError` is used when the integration response is 500
            serverError: |-
              { "message": "there was an error handling your request" }
constructs:
  sql-queue:
    type: queue
    # batchSize: 1
    worker:
      handler: likeuser/handler.likeUser
      # reservedConcurrency: 1
      package:
        patterns:
          - "likeuser/handler.js"
    extensions:
      queue:
        Properties:
          QueueName: likequeue

layers:
  base:
    name: "prod-dependencies"
    compatibleRuntimes:
      - nodejs20.x
    package:
      # artifact: nodejs.zip
      artifact: app/nodejs.zip

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        # AccessControl: PublicRead
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        BucketName: course-platzi
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal: "*"
